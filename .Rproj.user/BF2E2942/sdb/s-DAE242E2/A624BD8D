{
    "collab_server" : "",
    "contents" : "## Loop for diferent author sets: \n\n\ndf_summarizing_results <- NULL\n\nsvm_tune2 <- \n  tune(svm, factor(sender)~ ., data = df_training,\n       kernel=\"radial\", type = \"C-classification\",\n       ranges=list(gamma.range = (2^seq(-5, 0, 1)),\n                   cost.range = c(1, 4, 8, 16, 24, 32)))\n\nsvm_tune2$best.parameters$cost <- 1.5\nsvm_tune2$best.parameters$gamma <- 1.1\n\n\nfor (q in 1:50) {\n  \n  # Pick 3\n  filter <- df$sender %>% table() %>% sort() %>% .[.>50 ] %>% names() %>% as.vector() %>% sample(size = 3,replace = FALSE)\n  filter \n  \n  \ndf_all <- df %>% filter(sender %in% filter)\n# mail_summary(df_all)\n\n# Splitting in training and test data\n\nsample_training <- sample(1:nrow(df_all),round(nrow(df_all)*0.75),replace = FALSE)\n\ntraining <- c(1:nrow(df_all)) %in% sample_training\nprediction <- !c(1:nrow(df_all)) %in% training\n\ndf_training <- \n  df_all [training,]\n\ndf_prediction <- \n  df_all [prediction,]\n\n\n## classification mode\n# default with factor response:\nmodel <- svm(sender ~ \n               number_words +\n               total_char +\n               unique_words +\n               sentence_length +\n               average_word_length +\n               vocab_richness +\n               number_stopwords +\n               rate_stopwords,\n             data = df_training,\n             gamma = svm_tune2$best.parameters$gamma,\n             cost = svm_tune2$best.parameters$cost,\n             kernel = \"radial\",\n             type = \"C-classification\")\n\npred2 <- predict(model,df_prediction)\n\n# Check accuracy:\nt1 <- round(table(predicted = pred2,\n                  actual_author = df_prediction$sender) %>% prop.table(2),2); t1\nt2 <- round(table(predicted = pred2,\n                  actual_author = df_prediction$sender) ,2); t2\n\n\nt1_df <-  as.data.frame(t2) %>% group_by(actual_author) %>% mutate(rate = round(Freq/sum(Freq),2))\n\ndf_summarizing_results <- rbind.data.frame(df_summarizing_results,data.frame(t1_df,set = q))\n\ncorrect <- \n  t1_df %>% \n  filter(predicted == actual_author) %>% \n  ungroup() %>% \n  select(Freq)%>% \n  as.data.frame %>% \n  .[,1] \n\n\nt1_df <- \n  t1_df %>% group_by(actual_author) %>% \n  mutate(label_pos = rev(cumsum(rev(rate)))-0.5*rate) %>% \n  mutate(col = ifelse(predicted == actual_author,\"green\",\"red\")) %>% \n  mutate(total = sum(Freq,na.rm = TRUE))\n\ngg <- \n  ggplot(data = t1_df) + \n  geom_bar(aes(x = actual_author,\n               y = rate,\n               color = predicted,\n               fill = col),\n           stat = \"identity\")+\n  geom_text(aes(x = actual_author,\n                y = label_pos,\n                label =   paste0(format((round(rate,3)*100),digits = 2,decimal.mark = \",\"),\" %\")))+\n  geom_text(aes(x = actual_author,\n                y = 1.07,\n                label =   paste0(total,\" Observ.\")))+\n  scale_fill_manual(values=c(\"green\", \"red\")) +\n  labs(x = \"Actual Author\",\n       y = \"Predicted Author Frequency\",\n       title = paste0(\"Author Sample \",q),\n       subtitle = paste0(\"Correct predictions in \",format((round(correct[1],3)*100),digits = 2,decimal.mark = \",\"),\" %, \",format((round(correct[2],3)*100),digits = 2,decimal.mark = \",\"),\" %, and \",format((round(correct[1],3)*100),digits = 2,decimal.mark = \",\"),\" % of cases\"))+\n  theme_ipsum(grid = \"\")\n\n\nggsave(filename=paste0(\"Author_Set_\",q,\".pdf\"),\n       plot=gg,\n       pointsize = 24, \n       width = 18 ,\n       height = 10,\n       scale = 0.5,\n       dpi = 800)\n\n}\n\n\nsaveRDS(df_summarizing_results,\n        \"../data/df_summarizing_results.rds\")\n\n#####################################################\n\n\ndf_summarizing_results <- readRDS(\"../data/df_summarizing_results.rds\")\n\n# Correct \ndf_summary <- \n  df_summarizing_results %>% \n  group_by(set,actual_author) %>% \n  mutate(obs = sum(Freq,na.rm = TRUE)) %>% \n  group_by(set) %>% \n  mutate(inequality = ((((obs)-mean(unique(obs)))))) %>% \n  mutate(inequality_log = ifelse(inequality > 0, log(inequality),-log(abs(inequality)))) %>% \n  filter(actual_author == predicted) %>% \n  group_by(actual_author,inequality_log) %>% \n  mutate(total = sum(Freq)) %>% \n  summarise (correct = mean(rate))\n\n\ngg <- \n  ggplot(data = df_summary) + \n  geom_point(aes(x = inequality_log,\n                 y = correct,\n                 color = actual_author)) + \n  geom_line(aes(x = inequality_log,\n                 y = correct,\n                 color = actual_author)) + \n  labs(x = \"Observation inequality: Log squared difference from Mean n()\",\n       y = \"Authorship correctly predicted\",\n       title = paste0(\"Observation Inequality - A Decisive Predictor\"),\n       subtitle = paste0(\"Correct Authorship Attribution regressed on relative observation superiority\"))+\n  theme_ipsum(grid = \"Y\");gg\n\n\nggsave(filename=paste0(\"Observation_Inequality.pdf\"),\n       plot=gg,\n       pointsize = 24, \n       width = 18 ,\n       height = 10,\n       scale = 0.5,\n       dpi = 800)\n  \n\n",
    "created" : 1505720864490.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1485432228",
    "id" : "A624BD8D",
    "lastKnownWriteTime" : 1505719611,
    "last_content_update" : 1505719611,
    "path" : "C:/Users/Schliebs/OneDrive/17_stylometry/stylometry/loop_author_sets.R",
    "project_path" : "loop_author_sets.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}