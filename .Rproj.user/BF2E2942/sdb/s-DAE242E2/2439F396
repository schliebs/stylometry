{
    "collab_server" : "",
    "contents" : "#######################################\n##One-dimensional case: number of words\n#######################################\n\n# Read data\n\ndata <- readRDS(file = \"../data/processed_data.rds\")\n\n\n# Covariates that work \n\ndf <- \n  data %>% select(\n    sender,\n    number_words,\n    total_char,\n    unique_words,\n    sentence_length,\n    average_word_length ,\n    vocab_richness,\n    number_stopwords,\n    rate_stopwords\n)\n\ndf <- df[complete.cases(df),]\n\n#List all authors with more than 50 mails\ndf$sender %>% table() %>% sort() %>% .[.>20] \n\n# Pick 3\nthree <- df$sender %>% table() %>% sort() %>% .[.>50 ] %>% names() %>% as.vector() #%>% .[c(1:3)]\nthree \n\ndf2 <- df %>% filter(sender %in% three)\n\n# Mean number words\nsummary_table <- \n  df2 %>% group_by(sender) %>% summarize(number_words = mean(number_words,na.rm = T),\n                                       total_char = mean(total_char,na.rm = T),\n                                       unique_words = mean(unique_words,na.rm = T),\n                                       total_char = mean(total_char,na.rm = T),\n                                       sentence_length = mean(sentence_length,na.rm = T),\n                                       total_char = mean(total_char,na.rm = T),\n                                       unique_words = mean(unique_words,na.rm = T),\n                                       sentence_length = mean(sentence_length,na.rm = T),\n                                       average_word_length = mean(average_word_length,na.rm = T),\n                                       vocab_richness = mean(vocab_richness,na.rm = T),\n                                       number_stopwords = mean(number_stopwords,na.rm = T),\n                                       rate_stopwords = mean(rate_stopwords,na.rm = T)\n                                       )\n\n#\n## classification mode\n# default with factor response:\nmodel <- svm(sender ~ \n             number_words +\n             total_char +\n             unique_words +\n             sentence_length +\n             average_word_length +\n             vocab_richness +\n             number_stopwords +\n             rate_stopwords,\n             data = df2,\n             type = \"C-classification\")\n\nprint(model)\nsummary(model)\n\n# Tuned: \n\nsvm_tune <- \n  system.time(\n  tune(svm, factor(sender)~ ., data = df2,\n                 kernel=\"radial\", type = \"C-classification\",ranges=list(cost=10^(-1:2), gamma=c(.5,1,2)))\n  )\n\nprint(svm_tune)\n\n# test with train data\n#pred <- predict(model, x)\n# (same as:)\npred <- fitted(model)\n\n# Calculate Decision Values and Probabilities\npred2 <- predict(model,df,decision.values = TRUE)\nattr(pred2, \"decision.values\")\n\n# Check accuracy:\nround(table(predicted = pred, actual_author = df2$sender) %>% prop.table(2),2)\n\n",
    "created" : 1505651355002.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3099815202",
    "id" : "2439F396",
    "lastKnownWriteTime" : 1505688692,
    "last_content_update" : 1505688692301,
    "path" : "C:/Users/Schliebs/OneDrive/17_stylometry/stylometry/R/model_building.R",
    "project_path" : "R/model_building.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}